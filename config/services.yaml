# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\GitHub\EventHandler:
        arguments:
            - '@Lpdigital\Github\Parser\WebhookResolver'
            - '@App\GitHub\MembershipValidator'
            - '@App\GitHub\Synchronizer'
    App\GitHub\MembershipValidator:
            - '@Github\Client'
            - '%env(GITHUB_ORGANIZATION)%'
            - '%env(GITHUB_TEAM)%'
    App\GitHub\StatusUpdater:
        arguments:
            - '@Github\Client'
            - '%env(string:GITHUB_STATUS_CONTEXT)%'
    App\GitHub\Synchronizer:
        arguments:
            - '@GitWrapper\GitWrapper'
            - '%env(string:GITHUB_USERNAME)%'
            - '%env(string:GITHUB_SECRET)%'
            - '%kernel.cache_dir%'
            - '%env(string:GIT_REPO_URL)%'
    App\EventSubscriber\GitPrivateKeyFileGenerator:
        arguments:
          - '%env(string:GIT_PRIVATE_KEY)%'
          - '%kernel.cache_dir%'
    App\Platformsh\EnvironmentManager:
      arguments:
        - '@Platformsh\Client\PlatformClient'
        - '%env(string:PLATFORMSH_PROJECT)%'
    Lpdigital\Github\Parser\WebhookResolver:
        arguments: []
    GitWrapper\GitWrapper:
        arguments: []
        calls:
          - [ 'setTimeout', [840] ]
          - [ 'addLoggerEventSubscriber' ]
          - [ 'setDispatcher', ['@event_dispatcher'] ]
    GitWrapper\Event\GitLoggerEventSubscriber:
        arguments:
          - '@logger'
    Http\Client\HttpClient:
        class: 'Http\Client\Common\PluginClient'
        arguments:
          - '@HttpClient'
          - ['@Http\Client\Common\Plugin\LoggerPlugin']
    Http\Client\Common\Plugin\LoggerPlugin:
        arguments:
          - '@logger'
          - '@Http\Message\Formatter\FullHttpMessageFormatter'
    Http\Message\Formatter\FullHttpMessageFormatter:
        arguments: []
    HttpClient:
        class: 'Http\Client\HttpClient'
        factory: ['Http\Discovery\HttpClientDiscovery', 'find' ]
    Platformsh\Client\PlatformClient:
        arguments:
          - '@Platformsh\Client\Connection\Connector'
    Platformsh\Client\Connection\Connector:
        calls:
          - [ 'setApiToken', [ '%env(string:PLATFORMSH_API_TOKEN)%', 'exchange' ] ]
    Loggy:
        class: Loggy
        arguments:
          - 'app'
    logger: '@Loggy'
